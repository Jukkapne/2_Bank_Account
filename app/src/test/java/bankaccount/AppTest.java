/*
 * This source file was generated by the Gradle 'init' task
 */
package bankaccount;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

class AppTest {
@Test
    public void testInitialBalance() {
        BankAccount account = new BankAccount("123456", 1000.0);
        assertEquals(1000.0, account.getBalance(), 0.01, "Initial balance should be 1000.0");
    }

    @Test
    public void testDeposit() {
        BankAccount account = new BankAccount("123456", 500.0);
        account.deposit(250.0);
        assertEquals(750.0, account.getBalance(), 0.01, "Balance after deposit should be 750.0");
    }

    @Test
    public void testWithdrawSuccess() {
        BankAccount account = new BankAccount("123456", 1000.0);
        boolean result = account.withdraw(200.0);
        assertTrue(result, "Withdraw should succeed");
        assertEquals(800.0, account.getBalance(), 0.01, "Balance after withdrawal should be 800.0");
    }

    @Test
    public void testWithdrawFailure() {
        BankAccount account = new BankAccount("123456", 1000.0);
        boolean result = account.withdraw(1200.0);
        assertFalse(result, "Withdraw should fail due to insufficient funds");
        assertEquals(1000.0, account.getBalance(), 0.01, "Balance should remain 1000.0 after failed withdrawal");
    }

    @Test
    public void testNegativeDeposit() {
        BankAccount account = new BankAccount("123456", 500.0);
        account.deposit(-100.0);  // Attempt to deposit a negative amount
        assertEquals(500.0, account.getBalance(), 0.01, "Balance should remain 500.0 after negative deposit attempt");
    }

    @Test
    public void testNegativeWithdrawal() {
        BankAccount account = new BankAccount("123456", 500.0);
        boolean result = account.withdraw(-100.0);  // Attempt to withdraw a negative amount
        assertFalse(result, "Withdraw should fail due to negative amount");
        assertEquals(500.0, account.getBalance(), 0.01, "Balance should remain 500.0 after negative withdrawal attempt");
    }
}
